package com.ra.security.jwt;

import com.ra.security.user_principal.UserPrincipal;
import io.jsonwebtoken.*;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtProvider {
	
	private final Logger log = LoggerFactory.getLogger(JwtEntrypoint.class);
	
	@Value("${jwt.secret-key}")
	private String SECRET_KEY;
	
	@Value("${jwt.expired}")
	private Long EXPIRED;
	
	// tao chuoi ma hoa (accessToken)
	public String generateToken(UserPrincipal userPrincipal) {
		return Jwts.builder()
				  .setSubject(userPrincipal.getUsername())
				  .setIssuedAt(new Date())
				  .setExpiration(new Date(new Date().getTime() + EXPIRED))
				  .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
				  .compact();
	}
	
	// giai ma accessToken
	
	/**
	 * @param token is generated by user and SignatureAlgorithm.HS256
	 * @return get subject in token is username or email
	 * @author binh
	 */
	public String getUsernameByToken(String token) {
		return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJwt(token).getBody().getSubject();
	}
	
	/**
	 * @param token is generated by user and SignatureAlgorithm.HS256
	 * @return boolean because validate token my system
	 */
	
	// validate
	public boolean validateToken(String token) {
		try {
			Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJwt(token);
			return true;
		} catch (ExpiredJwtException e) {
			log.error("JWT: message error expired:", e.getMessage());
		} catch (UnsupportedJwtException e) {
			log.error("JWT: message error unsupported:", e.getMessage());
		} catch (MalformedJwtException e) {
			log.error("JWT: message error not formated:", e.getMessage());
		} catch (SignatureException e) {
			log.error("JWT: message error signature not math:", e.getMessage());
		} catch (IllegalArgumentException e) {
			log.error("JWT: message claims empty or argument invalid: ", e.getMessage());
		}
		return false;
	}
	
}
